#
# IntegrityPlay Docker Compose Configuration
# =========================================
#
# Complete containerized deployment of the IntegrityPlay financial surveillance system.
# Orchestrates all required services for development, testing, and demonstration environments.
#
# Services:
# - postgres: PostgreSQL 15 database for alert storage and metadata
# - redis: Redis 7 cache for session management and real-time data
# - minio: MinIO S3-compatible storage for evidence files and artifacts  
# - backend: FastAPI application server with fraud detection API
# - frontend: Next.js web dashboard for alert monitoring and analysis
# - worker: Background processing container for batch operations
#
# Network Architecture:
# - Internal docker network for service communication
# - External port exposure: 3000 (frontend), 8000 (backend), 5432 (postgres)
# - Health checks and dependency ordering for reliable startup
#
# Data Persistence:
# - PostgreSQL data volume for alert database persistence
# - MinIO volume for evidence file storage
# - Host-mounted results directory for file-based outputs
#
# Configuration:
# - Environment variables loaded from .env file
# - Development-friendly defaults with demo credentials
# - CORS configuration for frontend-backend communication
#
# Usage:
# docker compose up -d --build    # Start all services
# docker compose logs --tail=50   # View service logs
# docker compose down -v          # Stop and cleanup
#

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-integrity}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-integrity}
      POSTGRES_DB: ${POSTGRES_DB:-integrity}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      API_KEY: ${API_KEY:-demo_key}
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg2://integrity:integrity@postgres:5432/integrity}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_SECURE: ${MINIO_SECURE:-0}
      MINIO_BUCKET: ${MINIO_BUCKET:-integrityplay}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8000:8000"
    volumes:
      - ./results:/app/results

  frontend:
    build:
      context: ./frontend
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8000
      NEXT_PUBLIC_API_KEY: ${API_KEY:-demo_key}
    depends_on:
      - backend
    ports:
      - "3000:3000"

  worker:
    image: python:3.10-slim
    working_dir: /app
    volumes:
      - .:/app
    command: ["python", "-c", "print('Optional worker placeholder running.'); import time; time.sleep(3600)"]
    depends_on:
      - backend

volumes:
  pgdata:
  minio:
    # Uncomment to see interactive output in some environments
    # tty: true
